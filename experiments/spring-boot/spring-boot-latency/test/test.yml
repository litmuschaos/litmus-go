---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: litmus-experiment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: litmus-experiment
  template:
    metadata:
      labels:
        app: litmus-experiment
    spec:
      serviceAccountName: spring-boot-latency-sa
      containers:
        - name: gotest
          image: litmusgodev:latest
          imagePullPolicy: IfNotPresent
          command:
            - sleep
            - "3600"
          env:
            # provide application namespace
            - name: APP_NAMESPACE
              value: 'podtato'
            - name: EXPERIMENT_NAME
              value: 'spring-boot-latency'
            # provide application labels
            - name: APP_LABEL
              value: 'app=spring-boot-demo'
            - name: SEQUENCE
              value: 'serial'
            # provide application kind
            - name: APP_KIND
              value: 'deployment'
            # provide the chaos namespace
            - name: CHAOS_NAMESPACE
              value: 'podtato'
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CHAOS_SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName

            - name: TOTAL_CHAOS_DURATION
              value: '600'
            # provide auxiliary application details - namespace and labels of the applications
            # sample input is - "ns1:app=percona,ns2:name=nginx"
            - name: AUXILIARY_APPINFO
              value: ''
            ## Period to wait before injection of chaos in sec
            - name: RAMP_TIME
              value: ''
            ## env var that describes the library used to execute the chaos
            ## default: litmus. Supported values: litmus, powerfulseal, chaoskube
            - name: LIB
              value: 'litmus'

            # Chaos Monkey Spring Boot configuration
            # Level determines at which frequency the assault happens on the application. For a value N, the assaults happens every N requests
            - name: CM_LEVEL
              value: '1'

            # Whether the level should be used as a deterministic value (attack every x requests) or a chance (on average, 1 in x requests will be attacked)
            - name: CM_DETERMINISTIC
              value: 'true'

            # Comma separated list of watched Java services. Ex: com.example.application.controller.HelloController.sayHelle
            - name: CM_WATCHED_CUSTOM_SERVICES
              value: ''

            # Comma separated list of watchers. Possible values: controller, restController, service, repository, component, restTemplate, webClient, actuatorHealth
            - name: CM_WATCHERS
              value: 'restController'

            # Minimum latency (ms)
            - name: CM_LATENCY_RANGE_START
              value: '500'
            # Maxiumu latency (ms)
            - name: CM_LATENCY_RANGE_END
              value: '500'
